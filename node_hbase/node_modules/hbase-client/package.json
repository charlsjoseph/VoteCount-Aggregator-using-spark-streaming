{
  "name": "hbase-client",
  "version": "1.4.0",
  "description": "Asynchronous HBase client for Node.js, pure javascript implementation.",
  "main": "index.js",
  "files": [
    "index.js",
    "lib/"
  ],
  "scripts": {
    "test": "make test-all"
  },
  "config": {
    "blanket": {
      "pattern": "//^((?!(node_modules|test)).)*$/"
    },
    "travis-cov": {
      "threshold": 85
    }
  },
  "dependencies": {
    "debug": "~1.0.4",
    "eventproxy": "~0.3.1",
    "long": "~1.1.5",
    "readable-stream": "1.1.11",
    "utility": "~0.1.16",
    "zookeeper-watcher": "~0.2.0"
  },
  "devDependencies": {
    "autod": "*",
    "benchmark": "*",
    "blanket": "*",
    "contributors": "*",
    "interceptor": "0.1.4",
    "jshint": "*",
    "mm": "~0.2.1",
    "mocha": "*",
    "moment": "*",
    "pedding": "~1.0.0",
    "should": "3",
    "istanbul": "~0.3.2"
  },
  "homepage": "http://github.com/alibaba/node-hbase-client",
  "repository": {
    "type": "git",
    "url": "git://github.com/alibaba/node-hbase-client.git"
  },
  "keywords": [
    "node-hbase-client",
    "hbase",
    "hbase-client"
  ],
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "http://fengmk2.github.com"
  },
  "license": "MIT",
  "readme": "# hbase-client\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Gittip][gittip-image]][gittip-url]\n[![David deps][david-image]][david-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/hbase-client.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/hbase-client\n[travis-image]: https://img.shields.io/travis/alibaba/node-hbase-client.svg?style=flat-square\n[travis-url]: https://travis-ci.org/alibaba/node-hbase-client\n[coveralls-image]: https://img.shields.io/coveralls/alibaba/node-hbase-client.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/alibaba/node-hbase-client?branch=master\n[gittip-image]: https://img.shields.io/gittip/fengmk2.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/fengmk2/\n[david-image]: https://img.shields.io/david/alibaba/node-hbase-client.svg?style=flat-square\n[david-url]: https://david-dm.org/alibaba/node-hbase-client\n[node-image]: https://img.shields.io/badge/node.js-%3E=_0.10-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/hbase-client.svg?style=flat-square\n[download-url]: https://npmjs.org/package/hbase-client\n\n![logo](https://raw.github.com/alibaba/node-hbase-client/master/logo.png)\n\nAsynchronous HBase client for Node.js, **pure JavaScript** implementation.\n\n* Current State: Full tests on HBase `0.94.0` and `0.94.16`\n* [Java hbase-client](https://github.com/apache/hbase/tree/trunk/hbase-client)\n\n## Support HBase Server Versions\n\n* [√] 0.94.x\n    * [√] 0.94.0\n    * [√] 0.94.16\n* [ ] 0.96.x\n* [ ] 0.98.x\n\nIf you're use HBase >= 0.96.x,\nplease use [hbase-rpc-client](https://www.npmjs.com/package/hbase-rpc-client) which CoffeeScript HBase Implementation with protobuf.\n\n## Install\n\n```bash\n$ npm install hbase-client --save\n```\n\n## Run Unit Test\n\nStart local hbase server\n\n```bash\n$ ./start-local-hbase.sh\n```\n\nIf everything go fine, run tests\n\n```bash\n$ make test\n```\n\nStop hbase server\n\n```bash\n$ ./stop-local-hbase.sh\n```\n\n## Get Started with `CRUD`\n\n* Create a hbase client through zookeeper:\n\n```js\nvar HBase = require('hbase-client');\n\nvar client = HBase.create({\n  zookeeperHosts: [\n    '127.0.0.1:2181' // only local zookeeper\n  ],\n  zookeeperRoot: '/hbase-0.94.16',\n});\n```\n\n* Put a data row to hbase:\n\n```js\nclient.putRow('someTableName', 'rowkey1', {'f1:name': 'foo name', 'f1:age': '18'}, function (err) {\n  console.log(err);\n});\n```\n\n* Get the row we put:\n\n```js\nclient.getRow('someTableName', 'rowkey1', ['f1:name', 'f1:age'], function (err, row) {\n  console.log(row);\n});\n```\n\n* Delete the row we put:\n\n```js\nclient.deleteRow('someTableName', 'rowkey1', function (err) {\n  console.log(err);\n});\n```\n\n## Usage\n\n### `get(table, get, callback)`: Get a row from a table\n\n```js\nvar HBase = require('hbase-client');\n\nvar client = HBase.create({\n  zookeeperHosts: [\n    '127.0.0.1:2181', '127.0.0.1:2182',\n  ],\n  zookeeperRoot: '/hbase-0.94',\n});\n\n// Get `f1:name, f2:age` from `user` table.\nvar param = new HBase.Get('foo');\nparam.addColumn('f1', 'name');\nparam.addColumn('f1', 'age');\n\nclient.get('user', param, function (err, result) {\n  console.log(err);\n  var kvs = result.raw();\n  for (var i = 0; i < kvs.length; i++) {\n    var kv = kvs[i];\n    console.log('key: `%s`, value: `%s`', kv.toString(), kv.getValue().toString());\n  }\n});\n```\n\n### `getRow(table, rowkey, columns, callback)`\n\n```js\nclient.getRow(table, row, ['f:name', 'f:age'], function (err, row) {\n  row.should.have.keys('f:name', 'f:age');\n});\n\n// return all columns, like `select *`\nclient.getRow(table, row, function (err, row) {\n  row.should.have.keys('f:name', 'f:age', 'f:gender');\n});\n\nclient.getRow(table, row, '*', function (err, row) {\n  row.should.have.keys('f:name', 'f:age', 'f:gender');\n});\n```\n\n### `put(table, put, callback)`: Put a row to table\n\n```js\nvar put = new HBase.Put('foo');\nput.add('f1', 'name', 'foo');\nput.add('f1', 'age', '18');\nclient.put('user', put, function (err) {\n  console.log(err);\n});\n```\n\n### `putRow(table, rowKey, data, callback)`\n\n```js\nclient.putRow(table, rowKey, {'f1:name': 'foo name', 'f1:age': '18'}, function (err) {\n  should.not.exists(err);\n  client.getRow(table, rowKey, function (err, row) {\n    should.not.exist(err);\n    should.exist(row);\n    // {\n    //   'cf1:age': <Buffer 31 38>,\n    //   'cf1:name': <Buffer 66 6f 6f 20 6e 61 6d 65>\n    // }\n    row['cf1:name'].toString().should.equal('foo name');\n    row['cf1:age'].toString().should.equal('18');\n    done();\n  });\n});\n```\n\n### `delete(tableName, del, callback)`\n\n```js\nvar del = new Delete(rowkey);\ndel.deleteColumns('f', 'name-t');\nclient.delete(table, del, function (err, result) {\n  //TODO:...\n});\n```\n\n```js\nvar del = new Delete(rowkey);\ndel.deleteFamily('f');\nclient.delete(table, del, function (err, result) {\n  //TODO:...\n});\n```\n\n### `deleteRow(tableName, rowkey, callback)`\n\n```js\nvar tableName = 'user_search';\nvar rowkey = 'rowkeyyyyyy';\nclient.deleteRow(tableName, rowkey, function (err) {\n  //TODO:...\n});\n```\n\n### `mget(tableName, rows, columns, callback)`\n\n```js\nvar rows = ['row1', 'row2'];\nvar columns = ['f:col1', 'f:col2'];\nclient.mget(tableName, rows, columns, function (err, results){\n  //TODO:...\n});\n```\n\n### `mput(tableName, rows, callback)`\n\n```js\nvar rows = [{row: 'rowkey1', 'f:col1': 'col_value'}, {row: 'rowkey2', 'f:col1': 'col_value'}];\nclient.mput(tableName, rows, function (err, results) {\n  //TODO:...\n});\n```\n\n### `mdelete(tableName, rowkeys, callback)`\n\n```js\nvar rowKeys = ['rowkey1', 'rowkey2'];\nclient.mdelete(tableName, rowKeys, function (err, results) {\n  //TODO:...\n});\n\n```\n\n## Scan\n\n### Scan table and return row key only\n\nJava code:\n\n```java\nFilterList filterList = new FilterList({operator: FilterList.Operator.MUST_PASS_ALL});\nfilterList.addFilter(new FirstKeyOnlyFilter());\nfilterList.addFilter(new KeyOnlyFilter());\nScan scan = new Scan(Bytes.toBytes(\"scanner-row0\"));\nscan.setFilter(filterList);\n```\n\nNodejs code:\n\n```js\nvar filters = require('hbase-client').filters;\n\nvar filterList = new filters.FilterList({operator: filters.FilterList.Operator.MUST_PASS_ALL});\nfilterList.addFilter(new filters.FirstKeyOnlyFilter());\nfilterList.addFilter(new filters.KeyOnlyFilter());\nvar scan = new Scan('scanner-row0');\nscan.setFilter(filterList);\n\nclient.getScanner('user', scan, function (err, scanner) {\\\n  var index = 0;\n  var next = function (numberOfRows) {\n    scanner.next(numberOfRows, function (err, rows) {\n      // console.log(rows)\n      should.not.exists(err);\n      if (rows.length === 0) {\n        index.should.equal(5);\n        return scanner.close(done);\n      }\n\n      rows.should.length(1);\n\n      var closed = false;\n      rows.forEach(function (row) {\n        var kvs = row.raw();\n        var r = {};\n        for (var i = 0; i < kvs.length; i++) {\n          var kv = kvs[i];\n          kv.getRow().toString().should.equal('scanner-row' + index++);\n          kv.toString().should.include('/vlen=0/');\n          console.log(kv.getRow().toString(), kv.toString())\n        }\n      });\n\n      if (closed) {\n        return scanner.close(done);\n      }\n\n      next(numberOfRows);\n    });\n  };\n\n  next(1);\n});\n```\n\n### Scan table and return row filtered by single column value\n\nJava code:\n\n```java\nbyte [] family = Bytes.toBytes(\"cf1\");\nbyte [] qualifier = Bytes.toBytes(\"qualifier2\");\nFilterList filterList = new FilterList({operator: FilterList.Operator.MUST_PASS_ALL});\nfilterList.addFilter(new SingleColumnValueFilter(family, qualifier, CompareOp.LESS_OR_EQUAL, Bytes.toBytes(\"scanner-row0 cf1:qualifier2\")));\nfilterList.addFilter(new SingleColumnValueFilter(family, qualifier, CompareOp.GREATER_OR_EQUAL, new BinaryPrefixComparator(Bytes.toBytes(\"scanner-\"))));\nfilterList.addFilter(new SingleColumnValueFilter(family, qualifier, CompareOp.NOT_EQUAL, new BitComparator(Bytes.toBytes(\"0\"), BitComparator.BitwiseOp.XOR)));\nfilterList.addFilter(new SingleColumnValueFilter(family, qualifier, CompareOp.NOT_EQUAL, new NullComparator()));\nfilterList.addFilter(new SingleColumnValueFilter(family, qualifier, CompareOp.EQUAL, new RegexStringComparator(\"scanner-*\"))));\nfilterList.addFilter(new SingleColumnValueFilter(family, qualifier, CompareOp.EQUAL, new SubstringComparator(\"cf1:qualifier2\"))));\nScan scan = new Scan(Bytes.toBytes(\"scanner-row0\"));\nscan.setFilter(filterList);\n```\n\nNodejs code:\n\n```js\nvar filterList = new filters.FilterList({operator: filters.FilterList.Operator.MUST_PASS_ALL});\nvar family = 'cf1';\nvar qualifier = 'qualifier2';\nfilterList.addFilter(new filters.SingleColumnValueFilter(family, qualifier, 'LESS_OR_EQUAL', 'scanner-row0 cf1:qualifier2'));\nfilterList.addFilter(new filters.SingleColumnValueFilter(family, qualifier, 'GREATER_OR_EQUAL', new filters.BinaryPrefixComparator('scanner-')));\nfilterList.addFilter(new filters.SingleColumnValueFilter(family, qualifier, 'NOT_EQUAL', new filters.BitComparator('0', filters.BitComparator.BitwiseOp.XOR)));\nfilterList.addFilter(new filters.SingleColumnValueFilter(family, qualifier, 'NOT_EQUAL', new filters.NullComparator()));\nfilterList.addFilter(new filters.SingleColumnValueFilter(family, qualifier, 'EQUAL', new filters.RegexStringComparator('scanner-*')));\nfilterList.addFilter(new filters.SingleColumnValueFilter(family, qualifier, 'EQUAL', new filters.SubstringComparator('cf1:qualifier2')));\nvar scan = new Scan('scanner-row0');\nscan.setFilter(filterList);\n\nclient.getScanner('user', scan, function (err, scanner) {\\\n  //TODO:...\n});\n```\n\n## TODO\n\n- [√] support `put`\n- [√] benchmark\n- [√] more stable\n- [√] support `delete`\n- [√] multi actions\n    - [√] multi get\n    - [√] multi put\n    - [√] multi delete\n- [√] fail retry\n- [ ] filters\n    - [√] FilterList\n    - [√] FirstKeyOnlyFilter\n    - [√] KeyOnlyFilter\n    - [√] SingleColumnValueFilter\n\n## Benchmarks\n\n@see [docs/benchmark.md](https://github.com/alibaba/node-hbase-client/blob/master/docs/benchmark.md)\n\n## Authors\n\nThanks for @[haosdent](https://github.com/haosdent) support the test hbase clusters environment and debug helps.\n\n```bash\n$ git summary\n\n project  : node-hbase-client\n repo age : 1 year, 7 months\n active   : 70 days\n commits  : 195\n files    : 297\n authors  :\n   155\tfengmk2                 79.5%\n    20\ttangyao                 10.3%\n    15\tMartin Cizek            7.7%\n     1\tcoolme200               0.5%\n     1\tAlsotang                0.5%\n     1\t不四                  0.5%\n     1\tLukas Benes             0.5%\n     1\tVaclav Loffelmann       0.5%\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 - 2014 Alibaba Group Holding Limited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alibaba/node-hbase-client/issues"
  },
  "_id": "hbase-client@1.4.0",
  "dist": {
    "shasum": "13fbe0155719c2c03514ebb2459dcd8c1414e5fa"
  },
  "_from": "hbase-client@",
  "_resolved": "https://registry.npmjs.org/hbase-client/-/hbase-client-1.4.0.tgz"
}
