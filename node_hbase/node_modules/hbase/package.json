{
  "name": "hbase",
  "version": "0.2.2",
  "description": "HBase client using the REST connector",
  "author": {
    "name": "David Worms",
    "email": "david@adaltas.com"
  },
  "license": "BSD-3-Clause",
  "contributors": [
    {
      "name": "David Worms",
      "email": "david@adaltas.com"
    },
    {
      "name": "Michael Kurze",
      "email": "https://github.com/michaelku"
    },
    {
      "name": "Michal Taborsky",
      "email": "https://github.com/whizz"
    },
    {
      "name": "Marc Trudel",
      "email": "https://github.com/stelcheck"
    }
  ],
  "main": "./lib/index",
  "engines": {
    "node": ">= 0.1.90"
  },
  "optionalDependencies": {
    "krb5": "^0.0.3"
  },
  "devDependencies": {
    "coffee-script": "^1.10.0",
    "each": "^0.5.2",
    "mocha": "^2.3.2",
    "should": "^7.1.0"
  },
  "bugs": {
    "url": "https://github.com/wdavidw/node-hbase/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wdavidw/node-hbase.git"
  },
  "homepage": "https://github.com/wdavidw/node-hbase",
  "scripts": {
    "coffee": "./node_modules/.bin/coffee -b -o lib src",
    "pretest": "./node_modules/.bin/coffee -b -o lib src",
    "test": "NODE_ENV=test ./node_modules/.bin/mocha --compilers coffee:coffee-script/register --reporter dot"
  },
  "readme": "\n<pre style=\"font-family:courier\">\n ___   _           _          _     _ ______                   \n|   \\ | |         | |        | |   | |____  \\                  \n| |\\ \\| | ___   __| |_____   | |___| |____)  )_____  ___ _____ \n| | \\   |/ _ \\ / _  | ___ |  |  ___  |  __  ((____ |/___) ___ |\n| |  \\  | |_| ( |_| | ____|  | |   | | |__)  ) ___ |___ | ____|\n|_|   |_|\\___/ \\____|_____)  |_|   |_|______/\\_____(___/|_____) New BSD License\n</pre>\n\nNode HBase is a Node.JS client for the Apache HBase database. It use the Rest\nAPI (Stargate) to communicate with HBase. Currently, all the API is implemented\nand the data exchange format is JSON (but protocol buffer could follow).\n\nApache HBase is part of the Hadoop ecosystem. It describes itself as the Hadoop\ndatabase optimized for random, realtime read/write access to big data. It is an\nopen-source, distributed, versioned, column-oriented store modeled after Google\nBigtable.\n\nClient features include:\n\n*   Intuitive API following HBase naming conventions\n*   Documentation and tests\n*   Full Implementation of the REST API\n*   Transparent encoding/decoding of values\n*   Scanner and filter support implementing the `stream.Readable` API\n*   Kerberos Support\n\n## Installing\n\nVia [npm](http://github.com/isaacs/npm):\n\n```bash\nnpm install hbase\n```\n\n## Quick example\n\nThis code create a new HBase instance, create a table and a column family,\ninsert a few records and traverse them.\n\n```javascript\nvar assert = require('assert');\nvar hbase = require('hbase');\n\nhbase({ host: '127.0.0.1', port: 8080 })\n.table('my_table' )\n.create('my_column_family', function(err, success){\n  this\n  .row('my_row')\n  .put('my_column_family:my_column', 'my value', function(err, success){\n    this.get('my_column_family', function(err, cells){\n      this.exists(function(err, exists){\n        assert.ok(exists);\n      });\n    });\n  });\n});\n```\n\n## Using Kerberos/SPNEGO\n\nOptions accepts a krb5 object. Password and keytab authentication are supported. \nRefer to the [krb5] package for additionnal information on how to configure the\nkrb5 option.\n\nUsing a keytab:\n\n```\nvar hbase = require('hbase');\nhbase({\n  host: '127.0.0.1',\n  port: 8080,\n  \"krb5\": {\n    \"principal\": \"{username}@{REALM}\",\n    \"keytab\": \"{path/to/keytab}\",\n    \"service_principal\": \"HTTP@{fqdn}\"\n  }\n})\n.version();\n```\n\nUsing a password:\n\n```\nvar hbase = require('hbase');\nhbase({\n  host: '127.0.0.1',\n  port: 8080,\n  \"krb5\": {\n    \"principal\": \"{username}@{REALM}\",\n    \"password\": \"{password}\",\n    \"service_principal\": \"HTTP@{fqdn}\"\n  }\n})\n.version();\n```\n\n## Scanner and Filters\n\nThe scanner implement the `stream.Readable` API. For ease of usage, an optional\ncallback argument may be provided. For example:\n\n```bash\nclient\n.table('node_table')\n.scan({\n  startRow: 'my_row',\n  maxVersions: 1\n}, function(err, rows){\n  console.log(err, rows);\n});\n```\n\nis equivalent to:\n\n```coffee\nvar rows = [];\nscanner = client\n.table('node_table')\n.scan({\n  startRow: 'my_row',\n  maxVersions: 1\n});\nscanner.on('readable', function(){\n  while(chunk = scanner.read()){\n    rows.push(chunk);\n  }\n});\nscanner.on('error', function(err){\n  console.log(err);\n});\nscanner.on('end', function(){\n  console.log(rows);\n});\n```\n\nIt can be quite a pain to figure out what options can be sent\nwith a scanner request. You will find a lot of examples inside the \n[Scanner test][scanner] and also look at the [examples][mt_samples] published by\n[Marc Trudel][mt_home].\n\n## Running the tests\n\nTests are executed with mocha. Before running the tests the first time, copy the\nfile \"./test/properties.json.sample\" to \"./test/properties.json\" and make the\nappropriate changes.\n\nIf using the HDP sandbox, start the virtual machine, log-in as \"root\", start\nAmbari `start_ambari.sh`, start HBase `start_hbase.sh` and start the HBase REST\nserver `/usr/lib/hbase/bin/hbase rest -p 60080`.\n\nTo run the tests:\n\n```bash\nmake test\n```\n\nWhen testing against HBase secured with Kerberos, you must create a table with\nthe right ownership.\n\n```bash\nkinit hbase\nhbase shell\ncreate 'node_table', {NAME => 'node_column_family', VERSIONS => 5}\ngrant 'ryba', 'RWC', 'node_table'\n```\n\nYou can use the example located in \"test/properties.json.krb5\" to configure the\ntest. It comes pre-configured for [Ryba] configured in development cluster mode.\n\n## Related projects\n\n*   [Official Apache HBase project](http://hbase.apache.org)\n*   [REST server bundled with HBase (Stargate)](https://wiki.apache.org/hadoop/Hbase/Stargate)\n\n## Contributors\n\n*   David Worms: <https://github.com/wdavidw>\n*   Michael Kurze: <https://github.com/michaelku>\n*   Michal Taborsky: <https://github.com/whizz>\n*   Pierre Sauvage: <https://github.com/Pierrotws>\n\n[ryba]: https://github.com/ryba-io/ryba\n[scanner]: https://github.com/wdavidw/node-hbase/blob/master/test/scanner.coffee\n[mt_samples]: https://gist.github.com/3979381\n[mt_home]: https://github.com/stelcheck\n[krb5]: https://github.com/adaltas/node-krb5\n",
  "readmeFilename": "readme.md",
  "dependencies": {
    "krb5": "^0.0.3"
  },
  "_id": "hbase@0.2.2",
  "_from": "hbase@"
}
